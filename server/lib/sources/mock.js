// This modules mocks output generated by weboob.
import moment from 'moment' ;

import OperationType from '../../models/operationtype';

let log = require('printit')({
    prefix: 'sources/mock',
    date: true
});

const TIME_TO_GENERATE_OPERATIONS_MS = 500;

let hashAccount = (uuid) => {
    let hash = uuid.charCodeAt(0) +
               uuid.charCodeAt(3) +
               uuid.charCodeAt(1);
    return {
        main   : hash + '1',
        second : hash + '2',
        third  : hash + '3',
    }
}

export let SOURCE_NAME = 'mock';

export let FetchAccounts = (bankuuid, login, password, website) => {
    let output = {};

    let obj = hashAccount(bankuuid);
    let {main, second, third} = obj;

    output[bankuuid] = [
        {
            accountNumber : main,
            label         : `Compte bancaire ${main}`,
            balance       : "150",
            iban          : "235711131719"
        },
        {
            accountNumber : second,
            label         : `Livret A ${second}`,
            balance       : "500",
        },
        {
            accountNumber : third,
            label         : `Plan Epargne Logement ${third}`,
            balance       : "0"
        }
    ];

    if (Math.random() > .8) {
        output[bankuuid].push({
            "accountNumber": "0147200001",
            "label": "Assurance vie",
            "balance": "1000"
        });
    }

    return new Promise((accept, reject) => {
        accept(output);
    })
};


let randomLabels = [
    ['Café Moxka', 'Petit expresso rapido Café Moxka'],
    ['MerBnB', 'Paiement en ligne MerBNB'],
    ['Tabac Debourg', 'Bureau de tabac SARL Clopi Cloppa'],
    ['Rapide PSC', 'Paiement sans contact Rapide'],
    ['MacDollars PSC', 'Paiement sans contact Macdollars'],
    ['FNAK', 'FNAK CB blabla'],
    ['CB Sefaurat', 'Achat de parfum chez Sefaurat'],
    ['Polyprix CB', 'Courses chez Polyprix'],
    ['Croisement CB', 'Courses chez Croisement'],
    ['PRLV UJC', 'PRLV UJC'],
    ['CB Spotifaille', 'CB Spotifaille London'],
    ['Antiquaire', 'Antiquaire'],
    ['Le Perroquet Bourré', 'Le Perroquet Bourré SARL'],
    ['Le Vol de Nuit', 'Bar Le Vol De Nuit SARL'],
    ['Impots fonciers', 'Prelevement impots fonciers numero reference 47839743892 client 43278437289'],
    ['ESPA Carte Hassan Cehef', 'Paiement carte Hassan Cehef'],
    ['Indirect Energie', 'ESPA Indirect Energie SARL'],
    ['', 'VIR Mr Jean Claude Dusse'],
    ['Nuage Douillet', 'ESPA Abonnement Nuage Douillet'],
    ['Glagla Frigidaire', 'CB GLAGLA FRIGIDAIRE'],
    ['Digiticable', 'ESPA Digiticable'],
    ['NOGO Sport', 'CB NOGO Sport'],
    ['FramaHard', 'ESPA Don FramaHard'],
    ['Sergent Tchoutchou', 'CB online Sergent Tchoutchou'],
    ['RAeTP', 'CB Raleurs Ambulants et Traficoteurs Patentés'],
];

let randomLabelsPositive = [
    ['VIR Nuage Douillet', 'VIR Nuage Douillet REFERENCE Salaire'],
    ['Impots', 'Remboursement impots en votre faveur'],
    ['', 'VIR Pots de vin et magouilles pas claires'],
    ['Case départ', 'Passage par la case depart'],
    ['Assurancetourix', 'Remboursement frais médicaux pour plâtre généralisé'],
];

let rand = (low, high) => low + (Math.random() * (high - low) | 0);

let randInt = (low, high) => rand(low, high) | 0;

let randomLabel = () => randomLabels[randInt(0, randomLabels.length)];

let randomLabelPositive = () => randomLabelsPositive[randInt(0, randomLabelsPositive.length)];

let randomType = () => randInt(0, 10);

let generateDate = (lowDay, highDay, lowMonth, highMonth) =>
    moment()
        .month(rand(lowMonth, highMonth))
        .date(rand(lowDay, highDay))
        .format('YYYY-MM-DDT00:00:00.000[Z]');

let generateOne = (account) => {

    let n = rand(0, 100);
    let now = moment();
    let type = randomType();

    // with a 2% rate, generate a special operation to test duplicates (happening on 4th of
    // current month).
    if (n < 2) {
        return {
            account,
            amount : "-300",
            label  : "Loyer",
            raw    : "Loyer habitation",
            rdate  : generateDate(4, 4, now.month(), now.month()),
            type
        }
    }

    let rdate = generateDate(1, now.date(), 0, now.month());

    if (n < 15) {
        let [label, raw] = randomLabelPositive();
        let amount = (rand(100, 800) + rand(0, 100) / 100).toString();

        return {
            account,
            amount,
            label,
            raw,
            rdate,
            type
        }
    }

    let [label, raw] = randomLabel();
    let amount = (-rand(0, 60) + rand(0, 100) / 100).toString();

    return {
        account,
        amount,
        label,
        raw,
        rdate,
        type
    };
}

let selectRandomAccount = (uuid) => {

    let n = rand(0, 100);
    let accounts = hashAccount(uuid);

    if (n < 90)
        return accounts.main;

    if (n < 95);
        return accounts.second;

    return accounts.third;
}

let generate = (uuid) => {
    let operations = [];
    let count = 5;

    let i = count;
    while(i--) {
        operations.push(generateOne(selectRandomAccount(uuid)));
    }

    while(rand(0, 100) > 70 && count < 8) {
        operations.push(generateOne(selectRandomAccount(uuid)));
        count++;
    }

    log.info(`generated ${count} fake operations`);
    return operations;
}

export let FetchOperations = (bankuuid, login, password, website) => {
    return new Promise((accept, reject) => {
        setTimeout(() => {
            accept({
                [bankuuid]: generate(bankuuid)
            });
        }, TIME_TO_GENERATE_OPERATIONS_MS);
    });
}
